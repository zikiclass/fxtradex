// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SignUp {
  id        Int    @id @default(autoincrement())
  firstname String @db.VarChar(255)
  email     String
}

model Register {
  id             Int           @id @default(autoincrement())
  first_name     String?       @db.VarChar(255)
  last_name      String?       @db.VarChar(255)
  mobile         String?
  accounttype    String        @default("LIVE")
  email          String?       @unique
  password       String?
  currency       String        @default("USD")
  country        String?
  state          String?
  city           String?
  otp_code       String?
  street_address String?
  postal_code    String?
  referral_id    Int?
  date_created   DateTime?
  emailPIN       String?
  emailVerify    String        @default("no")
  idFront        String?
  idBack         String?
  idVerify       String        @default("no")
  addressPix     String?
  addressVerify  String?       @default("no")
  transactions   Transaction[]
  referrals      Referral[]
  deposits       Deposit[]
  withdrawals    Withdrawal[]
  traders        UserTrader[]
}

model Traders {
  id           Int          @id @default(autoincrement())
  trader       String?
  win_rate     String?
  profit_share String?
  publicID     String?
  date         DateTime?
  users        UserTrader[]
}

model UserTrader {
  userId   Int
  traderId Int
  user     Register @relation(fields: [userId], references: [id])
  traders  Traders  @relation(fields: [traderId], references: [id])

  @@id([userId, traderId])
}

model Transaction {
  id       Int      @id @default(autoincrement())
  userId   Int
  deposit  Float
  profit   Float
  btc      Float
  eth      Float
  bnb      Float
  doge     Float
  atom     Float
  referral Float
  user     Register @relation(fields: [userId], references: [id])
}

model Admin {
  id        Int       @id @default(autoincrement())
  email     String?   @unique
  password  String?
  firstname String?
  lastname  String?
  lastLogin DateTime?
}

model Referral {
  id             Int      @id @default(autoincrement())
  userId         Int
  referral_bonus Float
  user           Register @relation(fields: [userId], references: [id])
}

model Deposit {
  id             Int       @id @default(autoincrement())
  userId         Int
  amount         Float?
  account_       String?
  dep_method     String?
  date_deposited DateTime?
  status         String?
  user           Register  @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id             Int       @id @default(autoincrement())
  userId         Int
  amount         Float?
  method         String?
  from_account   String?
  account_number String?
  account_name   String?
  bank_name      String?
  crypto         String?
  wallet_address String?
  paypal_email   String?
  cash_tag       String?
  date           DateTime?
  status         String?
  user           Register  @relation(fields: [userId], references: [id])
}

model Wallets {
  id             Int     @id @default(autoincrement())
  wallet         String?
  wallet_address String? @unique
}

model Whatsapp {
  id             Int     @id @default(autoincrement())
  whatsappnumber String?
}

model CopyTraders {
  id          Int     @id @default(autoincrement())
  title       String?
  winrate     String?
  profitshare String?
  image       String?
}

model Trade {
  id        Int      @id @default(autoincrement())
  userId    Int // Reference to user (if you have a user model)
  leverage  Float
  action    String // "buy" or "sell"
  status    String   @default("pending") // "pending", "win", "lose"
  profit    Float    @default(0)
  loss      Float    @default(0)
  createdAt DateTime @default(now())
  duration  Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
